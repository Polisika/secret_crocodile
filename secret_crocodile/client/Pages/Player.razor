@inject HttpClient Http

@if (@role != "")
{
    @if (who_win != 0)
    {
        @if (who_win == 1)
        {
            <h1 class="display-1 text-danger">CROCO WON</h1>
        }
        else
        {
            <h1 class="display-1" style="color: darkblue">LIBERALS WON</h1>
        }
    }
    else
    {
        <h3 class="display-6">Your num: @num</h3>
        <h3 class="display-6">Your role: @role</h3>
        <h3 class="display-6" style="color: firebrick">Accepted croco laws: @accepted_c_laws</h3>
        <h3 class="display-6" style="color: darkblue">Accepted liberal laws: @accepted_l_laws</h3>
        @if (@anotherNum != "")
        {
            <h3 class="display-6">Num of your ally: @names[int.Parse(anotherNum)]</h3>
        }
        @if (@isPresident)
        {
            <h3 class="display-6">You are president</h3>
            @if (choosed_president != true)
            {
                <div>Choose player, that you want select as chancellor</div>
                <select @bind="_choosed">
                    @for (int i = 0; i < 5; i++)
                    {
                        @if (i.ToString() != num && i != cancellor_num)
                        {
                            <option value=@i.ToString()>@names[i]</option>
                        }
                    }
                </select>
                @if (@_choosed != 6)
                {
                    <button class="btn btn-danger" @onclick="choosed_cancellor">Make @names[_choosed] chancellor</button>
                }
                @if (@errors != "")
                {
                    <p class="text-danger">@errors</p>
                }
            }
        }
        @if (@isCancellor)
        {
            @if (isPresident)
            { 
                <h3 class="display-6">You were chancellor</h3>
            }
            else
            {
                <h3 class="display-6">You are chancellor</h3>
            }
        }
        @if (@Cards.Count > 0 && !card_dropped && (isPresident || isCancellor))
        {
            <div>Choose law:</div>
            <select @bind="Drop_Card">
                Choose one, which need drop:
                @for (int i = 1; i <= Cards.Count; i++)
                {
                    @if (@Cards[i - 1])
                    {
                        <option value=@i.ToString() style="color:cornflowerblue">Liberal</option>
                    }
                    else
                    {
                        <option value=@i.ToString() style="color:red">Croco</option>
                    }
                }
            </select>
            
            <p>Enter num, then click to any area, you will see button</p>
            <span class="text-danger">@validation_message_card</span>
            @if (@Drop_Card != 5)
            {
                <button class="btn btn-danger" @onclick="DropCard">Drop @(Cards[Drop_Card - 1]? "liberal" : "croco") card</button>
            }
        }
        @if (@president_num != null && !@isPresident)
        {
            <p>Current president @names[(int)president_num]</p>
        }
        @if (@cancellor_num != null && !@isCancellor)
        {
            @if (cancellor_num != 9 && cancellor_num != null)
            {
                <p>Current cancellor @names[(int)cancellor_num]</p>
            }        
    }
    }
}
else
{
    <p>Loading...</p>
}
@code {
    private int accepted_l_laws = 0;
    private int accepted_c_laws = 0;
    private string game_event = string.Empty;
    private string validation_message_card = string.Empty;
    private bool card_dropped = false;
    private int drop_card = 4;
    private int Drop_Card
    {
        get => drop_card + 1;
        set
        {
            if (value <= Cards.Count && value > 0)
            {
                drop_card = value - 1;
                validation_message_card = string.Empty;
            }
            else
                validation_message_card = "You need choose num from 1 to " + Cards.Count;
            StateHasChanged();
        }
    }
    private string validation_message = string.Empty;
    private bool? choosed_president = null;
    private int _choosed = 6;
    private int Choosed
    {
        get => _choosed; set
        {
            if (value <= 4 &&
                value >= 0 &&
                value != cancellor_num &&
                value != int.Parse(num))
            {
                validation_message = string.Empty;
                _choosed = value;
            }
            else
                validation_message = "Need choose player, num 0 <= num <= 4, but not youself";
            StateHasChanged();
        }
    }
    private string errors = "";
    private String role = "";
    private String anotherNum = "";
    private bool isPresident = false;
    private bool isCancellor = false;
    private bool wereCancellor = false;
    private int? president_num = null;
    private int? cancellor_num = null;
    private int who_win = 0;
    private List<bool> Cards = new List<bool>();


    [Parameter]
    public String num { get; set; }
    [Parameter]
    public string host { get; set; }
    [Parameter]
    public string[] names { get; set; }


    private async Task GetRole()
    {
        try
        {
            role = await Http.GetStringAsync(host + "/get_role/" + num);
            if (role == "Fascist")
                anotherNum = await Http.GetStringAsync(host + "/get_num/1"); // query fachist num
            else if (role == "Crokodile")
                anotherNum = await Http.GetStringAsync(host + "/get_num/0"); // query croco num
        }

        catch (Exception e)
        {
            role = e.Message;
        }
    }
    private async Task GetInfo()
    {
        while (true)
        {
            try
            {
                Console.WriteLine("I'm getting information!");
                Cards = new List<bool>();
                string info = await Http.GetStringAsync(host + "/get_info/" + num);
                var werePresident = isPresident;
                isPresident = info[1] == '1';
                if (isPresident && !werePresident)
                    choosed_president = false;
                else if (!werePresident)
                    choosed_president = null;
                isCancellor = info[0] == '1';
                wereCancellor = info[2] == '1';
                if (info.Length == 5)
                {
                    Cards.Add(info[3] == '1');
                    Cards.Add(info[4] == '1');
                    card_dropped = false;
                }
                if (info.Length == 6)
                {
                    Cards.Add(info[3] == '1');
                    Cards.Add(info[4] == '1');
                    Cards.Add(info[5] == '1');
                    card_dropped = false;
                }
                if (Cards.Count == 0)
                    card_dropped = true;

                StateHasChanged();

                await Task.Delay(400);
            }
            catch (Exception)
            { }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await GetRole();
        Task k = GetInfo();
        Task j = GetPCWInfo();
    }
    private async Task choosed_cancellor()
    {
        string resp = await Http.GetStringAsync(host + "/set_cancellor/" + Choosed.ToString());
        if (resp == "omfg")
        {
            errors = "You choosed player, that were chancellor.";
            choosed_president = false;
        }
        else
        {
            errors = "";
            choosed_president = true;
        }
        StateHasChanged();
    }
    private async Task DropCard()
    {
        card_dropped = true;
        Cards.Clear();
        StateHasChanged();
        string resp = await Http.GetStringAsync(host + "/drop_card/" +
                                  (Drop_Card - 1).ToString() + "/" +
                                  num.ToString());
        drop_card = 4;
    }
    private async Task GetPCWInfo()
    {
        while (true)
        {
            string p_num = await Http.GetStringAsync(host + "/who_president");

            president_num = int.Parse((p_num[0]).ToString());
            cancellor_num = int.Parse((p_num[1]).ToString());
            who_win = int.Parse((p_num[2]).ToString());
            accepted_l_laws = int.Parse((p_num[3]).ToString());
            accepted_c_laws = int.Parse((p_num[4]).ToString());

            isPresident = president_num == int.Parse(num);
            isCancellor = cancellor_num == int.Parse(num);
            if (isCancellor != (cancellor_num == int.Parse(num)) || isPresident != (president_num == int.Parse(num)))
                card_dropped = false;

            StateHasChanged();
            await Task.Delay(500);
        }
    }
}
