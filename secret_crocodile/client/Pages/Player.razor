@inject HttpClient Http

@if (@role != "")
{
    <h3>Your num: @num</h3>
    <h3>Your role: @role</h3>
    @if (@anotherNum != "")
    { 
    <h3>Num of your ally: @anotherNum</h3>
    }
    @if (@isPresident)
    {
    <h3>You are president</h3>
        @if (!(@choosed_president))
        {   
            // ЗДЕСЬ В i ПЕРЕДАЕТСЯ В МЕТОД ПЯТЕРКА
            @for (int i = 0; i < 5; i++)
            {
                @if (i.ToString() != num)
                {
                    <button @onclick="(async () => await choosed_cancellor(i))">Player num: @i</button>
                }
            }
            @if (@errors != "")
            {
                <p style="color:red">@errors</p>
            }
        }
    }
    @if (@isCancellor)
    { 
    <h3>You are chancellor</h3>
    }
    @if (Cards.Count > 0)
    {
    <ol>Choose one, which need drop: 
        @for (int i = 0; i < Cards.Count; i++)
        {
            @if (Cards[i])
            {
            <li style="color:red">Croco</li>
            }
            else
            { 
            <li style="color:cornflowerblue">Liberal</li>
            }
        }
    </ol>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    private string errors = "";
    private bool choosed_president = false;
    private String role = "";
    private String anotherNum = "";
    private bool isPresident = false;
    private bool isCancellor = false;
    private bool wereCancellor = false;
    private List<bool> Cards = new List<bool>();
    [Parameter]
    public String num { get; set; } = "";
    [Parameter]
    public string host { get; set; } = "http://localhost:5000";
    private async Task GetRole()
    {
        try
        {
            role = await Http.GetStringAsync(host + "/get_role/" + num);
            if (role == "Fascist")
                anotherNum = await Http.GetStringAsync(host + "/get_num/1"); // query fachist num
            else if (role == "Crokodile")
                anotherNum = await Http.GetStringAsync(host + "/get_num/0"); // query croco num
        }

        catch (Exception e)
        {
            role = e.Message;
        }
    }
    private async Task GetInfo()
    {
        while (true)
        {
            try
            {
                Cards.Clear();
                string info = await Http.GetStringAsync(host + "/get_info/" + num);
                isPresident = info[1] == '1';
                isCancellor = info[0] == '1';
                wereCancellor = info[2] == '1';
                if (info.Length == 5)
                {
                    Cards.Add(info[3] == '1');
                    Cards.Add(info[4] == '1');
                }
                if (info.Length == 6)
                {
                    Cards.Add(info[3] == '1');
                    Cards.Add(info[4] == '1');
                    Cards.Add(info[5] == '1');
                }

                StateHasChanged();
                await Task.Delay(1000);
            }
            catch (Exception)
            { }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await GetRole();
        Task k = GetInfo();
    }
    private async Task choosed_cancellor(int i)
    {
        string resp = await Http.GetStringAsync(host + "/set_cancellor/" + i.ToString());
        if (resp == "omfg")
        {
            choosed_president = false;
            errors = "Вы выбрали игрока, который уже был канцлером";
        }
        else
        {
            choosed_president = true;
            errors = "";
        }
    }
}
